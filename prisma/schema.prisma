generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_DATABASE_URL")
  directUrl = env("POSTGRES_URL")
}

model User {
  id                String             @id @default(cuid())
  email             String             @unique
  stripeCustomerId  String?            @unique
  planCode          String             @default("FREE")
  planRenewsAt      DateTime?
  extraCredits      Json               @default("{}")
  perfUsed          Int                @default(0)
  buildUsed         Int                @default(0)
  imageUsed         Int                @default(0)
  resetDate         DateTime           @default(now())
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  communityUsed     Int                @default(0)

  // Profile customization fields
  name              String?
  nickname          String?
  location          String?
  instagramHandle   String?
  profileIcon       String?            @default("ðŸ‘¤")
  backgroundTheme   String?            @default("midnight")

  communityImages   CommunityImage[]
  saved_images      saved_images[]
  saved_performance saved_performance?

  @@map("users")
}

model CommunityImage {
  id          String               @id @default(cuid())
  userEmail   String
  imageUrl    String
  description String?
  approved    Boolean              @default(false)
  likesCount  Int                  @default(0)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  likes       CommunityImageLike[]
  user        User                 @relation(fields: [userEmail], references: [email])

  @@map("community_images")
}

model CommunityImageLike {
  id        String         @id @default(cuid())
  imageId   String
  userEmail String
  createdAt DateTime       @default(now())
  image     CommunityImage @relation(fields: [imageId], references: [id], onDelete: Cascade)

  @@unique([imageId, userEmail])
  @@map("community_image_likes")
}

model VerificationCode {
  id        String   @id @default(cuid())
  email     String
  code      String   @unique
  expiresAt DateTime
  used      Boolean  @default(false)
  createdAt DateTime @default(now())

  @@map("verification_codes")
}

model promotion_redemptions {
  id          String     @id
  promotionId String
  userEmail   String
  redeemedAt  DateTime   @default(now())
  promotions  promotions @relation(fields: [promotionId], references: [id])

  @@unique([promotionId, userEmail])
}

model promotions {
  id                    String                  @id
  code                  String                  @unique
  planCode              String
  maxUses               Int
  usedCount             Int                     @default(0)
  active                Boolean                 @default(true)
  expiresAt             DateTime?
  createdAt             DateTime                @default(now())
  promotion_redemptions promotion_redemptions[]
}

model saved_images {
  id        String   @id
  userEmail String
  imageUrl  String
  carSpec   Json
  prompt    String
  createdAt DateTime @default(now())
  users     User     @relation(fields: [userEmail], references: [email])
}

model saved_performance {
  id        String   @id
  userEmail String   @unique
  carInput  Json
  results   Json
  createdAt DateTime @default(now())
  updatedAt DateTime
  users     User     @relation(fields: [userEmail], references: [email])
}

model tool_usage {
  id           String   @id
  toolType     String
  userEmail    String?
  fingerprint  String?
  success      Boolean  @default(true)
  errorMessage String?
  createdAt    DateTime @default(now())

  @@index([fingerprint])
  @@index([toolType, createdAt])
  @@index([userEmail])
}

model AnonymousUser {
  id            String   @id @default(cuid())
  fingerprint   String   @unique
  perfUsed      Int      @default(0)
  buildUsed     Int      @default(0)
  imageUsed     Int      @default(0)
  communityUsed Int      @default(0)
  resetDate     DateTime @default(now())
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("anonymous_users")
  @@index([fingerprint])
}
